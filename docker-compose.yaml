version: '3.3'

services:

    db:
        image: postgres:13
        restart: always
        env_file:
          - env/django_db.env
        volumes:
          - ./deploy/db_creation.sh:/docker-entrypoint-initdb.d/init.sh
          - ./data/postgres:/var/lib/postgresql/data
        networks:
          - net-iris

    web:
        build: .
        # DEVELOPMENT:
        # command: >
        #     bash -c "
        #         pipenv run python manage.py migrate &&
        #         pipenv run python manage.py runserver 0.0.0.0:8000 &
        #         yarn serve"
        # PRODUCTION:
        command: >
            bash -c "
                yarn build --no-clean &&
                pipenv run ./manage.py collectstatic --no-input &&
                pipenv run ./manage.py migrate &&
                pipenv run gunicorn --log-level debug --access-logfile - \
                  --workers 3 --bind 0.0.0.0:8000 backend.wsgi:application"
        restart: always
        env_file:
          - env/django_db.env
          - env/django_app.env
        volumes:
          # source
          - type: bind
            source: ./
            target: /app
            read_only: false
          # dataset - web app access
          - type: bind
            source: ./data/dataset
            target: /app/backend/dataset
            read_only: false
          # dataset - guest access
          - type: bind
            source: ./data/dataset
            target: /app/dist/static/data
            read_only: false
        ports:
          - "8000:8000"
          - "9000:9000"
        depends_on:
          - db
        networks:
          - net-nginx-proxy
          - net-iris

    certbot:
        image: certbot/certbot
        entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
        networks:
          - net-nginx-proxy
        volumes:
          - ./deploy/certbot/conf:/etc/letsencrypt
          - ./deploy/certbot/www:/var/www/certbot

    nginx:
        image: nginx:1.19.0-alpine
        restart: always
        command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
        ports:
          - 80:80
          - 443:443
        depends_on:
          - web
        networks:
          - net-nginx-proxy
        volumes:
          - ./deploy/nginx:/etc/nginx/conf.d
          - ./deploy/certbot/conf:/etc/letsencrypt
          - ./deploy/certbot/www:/var/www/certbot

networks:
    net-nginx-proxy:
        external: true
    net-iris:
        external: false
